initSidebarItems({"enum":[["BinOp",""],["CommentFlavor",""],["ElseBranchFlavor",""],["ExprKind",""],["ImplItemKind",""],["ItemOrMacro",""],["LiteralFlavor",""],["ModuleItemKind",""],["NominalDefKind",""],["PatKind",""],["PathSegmentKind",""],["PrefixOp",""],["SelfParamFlavor",""],["StmtKind",""],["StructFlavor",""],["TypeRefKind",""]],"struct":[["Alias",""],["ArgList",""],["ArrayExpr",""],["ArrayType",""],["AssocTypeArg",""],["AstChildren",""],["Attr",""],["BinExpr",""],["BindPat",""],["Block",""],["BlockExpr",""],["BreakExpr",""],["CallExpr",""],["CastExpr",""],["Comment",""],["CommentIter",""],["Condition",""],["ConstDef",""],["ContinueExpr",""],["DynTraitType",""],["EnumDef",""],["EnumVariant",""],["EnumVariantList",""],["Expr",""],["ExprStmt",""],["ExternCrateItem",""],["FieldExpr",""],["FieldPat",""],["FieldPatList",""],["FnDef",""],["FnPointerType",""],["ForExpr",""],["ForType",""],["IfExpr",""],["ImplBlock",""],["ImplItem",""],["ImplTraitType",""],["IndexExpr",""],["ItemList",""],["ItemOrMacroIter",""],["Label",""],["LambdaExpr",""],["LetStmt",""],["LifetimeArg",""],["LifetimeParam",""],["Literal",""],["LiteralPat",""],["LoopExpr",""],["MacroCall",""],["MatchArm",""],["MatchArmList",""],["MatchExpr",""],["MatchGuard",""],["MethodCallExpr",""],["Module",""],["ModuleItem",""],["Name",""],["NameRef",""],["NamedField",""],["NamedFieldDef",""],["NamedFieldDefList",""],["NamedFieldList",""],["NeverType",""],["NominalDef",""],["Param",""],["ParamList",""],["ParenExpr",""],["ParenType",""],["Pat",""],["Path",""],["PathExpr",""],["PathPat",""],["PathSegment",""],["PathType",""],["PlaceholderPat",""],["PlaceholderType",""],["PointerType",""],["PosFieldDef",""],["PosFieldDefList",""],["PrefixExpr",""],["RangeExpr",""],["RangePat",""],["RefExpr",""],["RefPat",""],["ReferenceType",""],["RetType",""],["ReturnExpr",""],["SelfParam",""],["SlicePat",""],["SliceType",""],["SourceFile",""],["StaticDef",""],["Stmt",""],["StructDef",""],["StructLit",""],["StructPat",""],["TokenTree",""],["TraitDef",""],["TryExpr",""],["TupleExpr",""],["TuplePat",""],["TupleStructPat",""],["TupleType",""],["TypeAliasDef",""],["TypeArg",""],["TypeArgList",""],["TypeBound",""],["TypeBoundList",""],["TypeParam",""],["TypeParamList",""],["TypeRef",""],["UseItem",""],["UseTree",""],["UseTreeList",""],["Visibility",""],["WhereClause",""],["WherePred",""],["WhileExpr",""],["Whitespace",""]],"trait":[["ArgListOwner",""],["AstNode","The main trait to go from untyped `SyntaxNode`  to a typed ast. The conversion itself has zero runtime cost: ast and syntax nodes have exactly the same representation: a pointer to the tree root and a pointer to the node itself."],["AttrsOwner",""],["DocCommentsOwner",""],["FnDefOwner",""],["LoopBodyOwner",""],["ModuleItemOwner",""],["NameOwner",""],["TypeAscriptionOwner",""],["TypeBoundsOwner",""],["TypeParamsOwner",""],["VisibilityOwner",""]]});